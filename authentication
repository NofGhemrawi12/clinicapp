#import Requests module 

import email
import requests
import hashlib
from Connection import get_conn
import sqlite3
from requests.oauthlib import OAuth2session
from authlib.integrations.requests_client import OAuth2session

class User():
    def __init__(self, username, password, email):
        self.username= username
       # self.password= password
        self.email= email
        self.password = self._encrypt_pw(password)
        
    def login(self, username, password):
        get_conn()
        self.username= username
        self.password= password
        cursor.executescripte("SELECT * FROM `Employee` WHERE username = {{}} AND password = {{ }}")
        
        if username==username and password== password :
                print("login successful!")
    
    
    def register (self, name, role, phone, email, username, password, pass_check):
        get_conn()

        self.name           = name
        self.role           = role
        self.phone          = phone
        self.username       = username
        self.password       = password
        self.pass_check     = password
        self.email          = email


        cursor.executescript(" INSERT INTO `Employee` (name, role, phone, email, username, password) value (?,?,?,?,?,?) ({self.username})")
        if username.get  exists:
            print("invalid username")
        else:
            print("valid username")    
            if password== pass_check:
             print("Password match, you can login")
            else:
             print("pass doesn't match")
             cursor.executescript(" INSERT INTO Employee if does not exist (email) value ({self.email})")
             if email exists:
                print("choose another email")
             else:
                print("succesfully registred username")
        
        if password != pass_check:
             print("Password match, you can login")
        else:
            print("pass doesn't match")
    
    def token_generation():
        get_conn()
        # include your data
        client_id= client_id
        client_secret= client_secret
        redirect_uri = redirect_uri
        Grant_type= "client_credentials"

        # Create a session object
        oauth2 = OAuth2Session(client_id, client_secret, redirect_uri = redirect_uri)

        # Fetch a token
        token = oauth2.fetch_token("<url to fetch access token>", client_secret = client_secret)
        print(token)

        # Get your authenticated response
        resp = oauth2.get("URL to the resource")
        print(resp)






    #     def making_get_request():
    #   # making a get request 
    #      resp = requests.get("http://clinic.db /oauth2/ 'user', 'pass'"
    #                     auth= oauth2 )

 
    #    ##return request object 
    #     return resp



    # if resp.status_code== "200":
    #     print ("Login succesfully" )
    
    # else: 
    #  print("invalid login")
    

    # def post():
    #  #posting info
    #  info= {"country": "Lebanon", "postal code": "1300"}
    #  response_2= requests.POST("http://clinic.db/OAuth2/POST", params= info)
    #  return info
    #  print(response_2.status_code)

    # def replace():
    # #replace info
    #  response_2= requests.PUT("http://clinic.db/OAuth2/PUT", "country": "Spain")
    #  return response_2

    # def delete():
    #  # delete request 
    #   response_2 = requests.DELETE("http://clinic.db/OAuth2/DELETE", {"user"})
    # if response.status_code==201:
    #  print ("user is succesfully deleted")
    # else:
    #  print("request does not succeeded")
