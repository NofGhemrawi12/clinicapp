#import Requests module 

from Connection import get_conn
import jwt


class authentication(self):
    
    def __init__(self, username, password, email, authentication):
        self.username           = username
       # self.password= password
        self.email              = email
        self.authentication     = authentication

        self.password           = self._encrypt_pw(password)
        
    def generate_token(self, user_id, username, email):
        
        self.user_id            = user_id
        self.username           = username
        self.email              = email
        
        payload_data    = {
            "id"            :  {user_id},
            "username"      :  {username},
            "email"         :  {email}
        }
        
        token = jwt.encode(
            payload             = payload_data
            key                 = "12345678"
        )
        return token

    def Register(self, username, password, email, type):
        get_conn()

        self.username    = username
        self.password    = password
        self.pass_check  = password
        self.email       = email
        self.type        = type
       
        #unique value condition 
        if username.get() == "" or password.get() == "" or email.get() == "":
            print("please enter the required fields")
        else:
            if type.get() == "doctor" :
                cursor.executescript("INSERT INTO Doctor (username, password, email) values (?,?,?)", str(username.get()), str(password.get()), str(email.get()))
            else if type.get() == "patient"
                cursor.executescript("INSERT INTO Patient (username, password, email) values (?,?,?)", str(username.get()), str(password.get()), str(email.get()))
            else 
                cursor.executescript("INSERT INTO Employee (username, password, email) values (?,?,?)", str(username.get()), str(password.get()), str(email.get()))

            if cursor.fetchone() != None:
               print("this username is already taken")
            else:
        
            # pass valiidity condition
            if password is instance character_type ==>3:
            charater_type = { "Uppercase letters": "A-Z",
                            "Lowercase letters": "a-z",
                            "Numbers": 0-9,
                            "Symbols": ~`! @#$%^&*()_-+={[}]|\:;"'<,>.?/ }
                print("password is valid ")
            else:
                if password= None:
                print("invalid password")
                else:
                    print("create a valid password")
            cursor.commit()
            get_conn().close
        
    def login(self, username, password):
        get_conn()
        self.username= username
        self.password= password
        cursor.executescripte("SELECT * FROM `Employee` WHERE username = {{self.username}} AND password = {{self.password }}")
        
        if username.get() = "" or password.get() = "" :
                print("login successful!")
        else:
             cursor.executescript("INSERT INTO Employee (username, password) values (?,?,?)", str(username.get()), str(password.get())
             cursor.fetchall()
             cursor.commit()
         
         
    def logout(self)
          get_conn()
          result= "are u sure u want to exit"
          if result==yes:
               root.destory()
               exit()